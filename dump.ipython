import neurosynth.base.data as nbd
import neurosynth.base.dataset as nbd
import preprocess as pp
import experiment as ex
import numpy as np
coordinates = pp.extract_coordinates('/home1/02863/mparikh/neurosynth-data/database.txt', 'data/2mm_brain_mask.npy')
import json
with open('data/docdict.txt', 'w')  as f:
    json.dump(coordinates, f)
len(coordinates)
study_dict = ex.filter_studies_active_voxels(coordinates, 'data/MNI152_T1_2mm_brain.nii.gz')
dataset = nbd.Dataset('/home1/02863/mparikh/neurosynth-data/database.txt')
dataset.save('/home1/02863/mparikh/ml-project/data/dataset.pkl')
study_dict = ex.filter_studies_active_voxels(coordinates, 'data/MNI152_T1_2mm_brain.nii.gz', threshold=500, radius=6)
len(study_dict)
ids = data.feature_table.get_ids(['emotion', 'pain', 'reward'], threshold=0.001, func=np.min, get_weights=True)
ids = dataset.feature_table.get_ids(['emotion', 'pain', 'reward'], threshold=0.001, func=np.min, get_weights=True)
dataset =  nbd.Dataset.load('data/dataset.pkl')
ids = dataset.feature_table.get_ids(['emotion', 'pain', 'reward'], threshold=0.001, func=np.min, get_weights=True)
feature_dict = ex.filter_studies_terms('/Users/rk7/neurosynth-data/features.txt', terms=['emotion', 'reward', 'pain'], set_unique_label=True)
feature_dict = ex.filter_studies_terms('/home1/02863/mparikh/neurosynth-data/features.txt', terms=['emotion', 'reward', 'pain'], set_unique_label=True)
len(feature_dict)
feature_dict
e_r = {}
for key in feature_dict:
    if key == 'emotion' or key == 'reward':
        e_r[key] = feature_dict[key]
len(e_r)
for key in feature_dict:
    if feature_dict[key] in ['emotion', 'reward']:
        e_r[key] = feature_dict[key]
len(e_r)
e_p = {}
for key in feature_dict:
    if feature_dict[key] in ['emotion', 'pain']:
        e_p[key] = feature_dict[key]
len(e_p)
r_p = {}
for key in feature_dict:
    if feature_dict[key] in ['reward', 'pain']:
        r_p[key] = feature_dict[key]
len(r_p)
studyER, ER = ex.get_intersecting_dicts(study_dict, e_r)
studyEP, EP = ex.get_intersecting_dicts(study_dict, e_p)
studyRP, RP = ex.get_intersecting_dicts(study_dict, r_p)
len(ER)
len(EP)
len(RP)
xER, yER = pp.get_features_targets(studyER, ER, mask='data/MNI152_T1_2mm_brain.nii.gz')
xEP, yEP = pp.get_features_targets(studyEP, EP, mask='data/MNI152_T1_2mm_brain.nii.gz')
xRP, yRP = pp.get_features_targets(studyRP, RP, mask='data/MNI152_T1_2mm_brain.nii.gz')
from sklearn.naive_bayes import MultinomialNB
from sklearn import cross_validation
from sklearn import preprocessing
from sklearn.metrics import confusion_matrix
def classify(x, y)
def classify(x, y):
    le = preprocessing.LabelEncoder()
    le.fit(y)
    y_new = le.transform(y)
    clf = MultinomialNB()
    kf = cross_validation.KFold(len(y_new), n_folds=10)
    accuracy1 = []
    accuracy2 = []
    for train, test in kf:
        predicted = clf.fit(x[train],y_new[train]).predict(x[test])
        conf_mat =  confusion_matrix(x[test], predicted, labels=[0,1])
        accuracy1.append(conf_mat)
    return accuracy1
cfEP = classify(xEP, yEP)
def classify(x, y):
    le = preprocessing.LabelEncoder()
    le.fit(y)
    y_new = le.transform(y)
    clf = MultinomialNB()
    kf = cross_validation.KFold(len(y_new), n_folds=10)
    accuracy1 = []
    accuracy2 = []
    for train, test in kf:
        predicted = clf.fit(x[train],y_new[train]).predict(x[test])
        conf_mat =  confusion_matrix(y_new[test], predicted, labels=[0,1])
        accuracy1.append(conf_mat)
    return accuracy1
cfEP = classify(xEP, yEP)
cfEP
cfER = classify(xER, yER)
le.fit
from sklearn.preprocessing import LabelEncoder
le = LabelEncoder()
le.fit(y)
le.fit(['emotion', 'pain'])
le.inverse_transform([0, 1])
le.fit(['emotion', 'reward'])
le.inverse_transform([0, 1])
le.fit(['pain', 'reward'])
le.inverse_transform([0, 1])
cfER
cfRP = classify(xRP, yRP)
cfRP
len(feature_dict)